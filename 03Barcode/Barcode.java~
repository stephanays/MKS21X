public class Barcode implements Comparable<Barcode>{
    private String _zip;
    private int _checkDigit;

    public Barcode(String zip){
	if(!(zip.length()==5)){
	    throw new IllegalArgumentException("zip is not the correct length");
	}
	for(int x=0; x<zip.length();x++){
	    if(zip.charAt(x)<'0'  || zip.charAt(x)>'9'){
		throw new IllegalArgumentException("zip has non-digit elements");
	    }
	}
	_zip=zip;
	_checkDigit=0;
    }

    public Barcode clone(){
	Barcode imposter=new Barcode();
	imposter=this;
	return imposter;
    }

    private int checkSum(){
	int sum=0;
	for(int x=0; x<_zip.length(); x++){
	    sum+=(_zip.charAt(x)-'0');
	}
	return sum;
    }

    public String barcodeImage(){
	String full=_zip+_checkDigit;
	String image="";
	String pattern;
	for(int x=0; x<full.length(); x++){
	    switch(full.charAt(x)){
		    case '1':
			pattern=":::||";
			break;	
		    case '2':
			pattern="::|:|";
			break;
		    case '3':
			pattern="::||:";
			break;
		    case '4':
			pattern=":|::|";
			break;
		    case '5':
			pattern=":|:|:";
			break;
		    case '6':
			pattern=":||::";
			break;
		    case '7':
			pattern="|:::|";
			break;
		    case '8':
			pattern="|::|:";
			break;
		    case '9':
			pattern="|:|::";
			break;
		    case '0':
			pattern="||:::";
			break;
		}
	    image+=pattern;
	}	
	return image;
    }

    public String toString(){
	String ans=_zip+_checkDigit+"   "+this.barcodeImage();
	return ans;
    }

    public int compareTo(Barcode other){
	String a=_zip+_checkDigit;
	String b=other._zip+other._checkDigit;
	return (Integer.valueOf(a)).compareTo(Integer.valueOf(b));
    }
    
}
